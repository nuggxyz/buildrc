// Code generated by mockery v2.38.0. DO NOT EDIT.

package mockery

import (
	context "context"

	afero "github.com/spf13/afero"

	git "github.com/walteh/buildrc/pkg/git"

	mock "github.com/stretchr/testify/mock"

	semver "github.com/Masterminds/semver/v3"
)

// MockReleaseProvider_git is an autogenerated mock type for the ReleaseProvider type
type MockReleaseProvider_git struct {
	mock.Mock
}

type MockReleaseProvider_git_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReleaseProvider_git) EXPECT() *MockReleaseProvider_git_Expecter {
	return &MockReleaseProvider_git_Expecter{mock: &_m.Mock}
}

// DeleteReleaseArtifact provides a mock function with given fields: ctx, id, name
func (_m *MockReleaseProvider_git) DeleteReleaseArtifact(ctx context.Context, id string, name string) error {
	ret := _m.Called(ctx, id, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReleaseArtifact")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReleaseProvider_git_DeleteReleaseArtifact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteReleaseArtifact'
type MockReleaseProvider_git_DeleteReleaseArtifact_Call struct {
	*mock.Call
}

// DeleteReleaseArtifact is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - name string
func (_e *MockReleaseProvider_git_Expecter) DeleteReleaseArtifact(ctx interface{}, id interface{}, name interface{}) *MockReleaseProvider_git_DeleteReleaseArtifact_Call {
	return &MockReleaseProvider_git_DeleteReleaseArtifact_Call{Call: _e.mock.On("DeleteReleaseArtifact", ctx, id, name)}
}

func (_c *MockReleaseProvider_git_DeleteReleaseArtifact_Call) Run(run func(ctx context.Context, id string, name string)) *MockReleaseProvider_git_DeleteReleaseArtifact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockReleaseProvider_git_DeleteReleaseArtifact_Call) Return(_a0 error) *MockReleaseProvider_git_DeleteReleaseArtifact_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReleaseProvider_git_DeleteReleaseArtifact_Call) RunAndReturn(run func(context.Context, string, string) error) *MockReleaseProvider_git_DeleteReleaseArtifact_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadReleaseArtifact provides a mock function with given fields: ctx, id, name, filesystem
func (_m *MockReleaseProvider_git) DownloadReleaseArtifact(ctx context.Context, id string, name string, filesystem afero.Fs) (afero.File, error) {
	ret := _m.Called(ctx, id, name, filesystem)

	if len(ret) == 0 {
		panic("no return value specified for DownloadReleaseArtifact")
	}

	var r0 afero.File
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, afero.Fs) (afero.File, error)); ok {
		return rf(ctx, id, name, filesystem)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, afero.Fs) afero.File); ok {
		r0 = rf(ctx, id, name, filesystem)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(afero.File)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, afero.Fs) error); ok {
		r1 = rf(ctx, id, name, filesystem)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReleaseProvider_git_DownloadReleaseArtifact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadReleaseArtifact'
type MockReleaseProvider_git_DownloadReleaseArtifact_Call struct {
	*mock.Call
}

// DownloadReleaseArtifact is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - name string
//   - filesystem afero.Fs
func (_e *MockReleaseProvider_git_Expecter) DownloadReleaseArtifact(ctx interface{}, id interface{}, name interface{}, filesystem interface{}) *MockReleaseProvider_git_DownloadReleaseArtifact_Call {
	return &MockReleaseProvider_git_DownloadReleaseArtifact_Call{Call: _e.mock.On("DownloadReleaseArtifact", ctx, id, name, filesystem)}
}

func (_c *MockReleaseProvider_git_DownloadReleaseArtifact_Call) Run(run func(ctx context.Context, id string, name string, filesystem afero.Fs)) *MockReleaseProvider_git_DownloadReleaseArtifact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(afero.Fs))
	})
	return _c
}

func (_c *MockReleaseProvider_git_DownloadReleaseArtifact_Call) Return(_a0 afero.File, _a1 error) *MockReleaseProvider_git_DownloadReleaseArtifact_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReleaseProvider_git_DownloadReleaseArtifact_Call) RunAndReturn(run func(context.Context, string, string, afero.Fs) (afero.File, error)) *MockReleaseProvider_git_DownloadReleaseArtifact_Call {
	_c.Call.Return(run)
	return _c
}

// GetReleaseByID provides a mock function with given fields: ctx, id
func (_m *MockReleaseProvider_git) GetReleaseByID(ctx context.Context, id string) (*git.Release, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetReleaseByID")
	}

	var r0 *git.Release
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*git.Release, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *git.Release); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.Release)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReleaseProvider_git_GetReleaseByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReleaseByID'
type MockReleaseProvider_git_GetReleaseByID_Call struct {
	*mock.Call
}

// GetReleaseByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockReleaseProvider_git_Expecter) GetReleaseByID(ctx interface{}, id interface{}) *MockReleaseProvider_git_GetReleaseByID_Call {
	return &MockReleaseProvider_git_GetReleaseByID_Call{Call: _e.mock.On("GetReleaseByID", ctx, id)}
}

func (_c *MockReleaseProvider_git_GetReleaseByID_Call) Run(run func(ctx context.Context, id string)) *MockReleaseProvider_git_GetReleaseByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockReleaseProvider_git_GetReleaseByID_Call) Return(_a0 *git.Release, _a1 error) *MockReleaseProvider_git_GetReleaseByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReleaseProvider_git_GetReleaseByID_Call) RunAndReturn(run func(context.Context, string) (*git.Release, error)) *MockReleaseProvider_git_GetReleaseByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetReleaseByTag provides a mock function with given fields: ctx, tag
func (_m *MockReleaseProvider_git) GetReleaseByTag(ctx context.Context, tag string) (*git.Release, error) {
	ret := _m.Called(ctx, tag)

	if len(ret) == 0 {
		panic("no return value specified for GetReleaseByTag")
	}

	var r0 *git.Release
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*git.Release, error)); ok {
		return rf(ctx, tag)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *git.Release); ok {
		r0 = rf(ctx, tag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.Release)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReleaseProvider_git_GetReleaseByTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReleaseByTag'
type MockReleaseProvider_git_GetReleaseByTag_Call struct {
	*mock.Call
}

// GetReleaseByTag is a helper method to define mock.On call
//   - ctx context.Context
//   - tag string
func (_e *MockReleaseProvider_git_Expecter) GetReleaseByTag(ctx interface{}, tag interface{}) *MockReleaseProvider_git_GetReleaseByTag_Call {
	return &MockReleaseProvider_git_GetReleaseByTag_Call{Call: _e.mock.On("GetReleaseByTag", ctx, tag)}
}

func (_c *MockReleaseProvider_git_GetReleaseByTag_Call) Run(run func(ctx context.Context, tag string)) *MockReleaseProvider_git_GetReleaseByTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockReleaseProvider_git_GetReleaseByTag_Call) Return(_a0 *git.Release, _a1 error) *MockReleaseProvider_git_GetReleaseByTag_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReleaseProvider_git_GetReleaseByTag_Call) RunAndReturn(run func(context.Context, string) (*git.Release, error)) *MockReleaseProvider_git_GetReleaseByTag_Call {
	_c.Call.Return(run)
	return _c
}

// HasReleaseArtifact provides a mock function with given fields: ctx, id, name
func (_m *MockReleaseProvider_git) HasReleaseArtifact(ctx context.Context, id string, name string) (bool, error) {
	ret := _m.Called(ctx, id, name)

	if len(ret) == 0 {
		panic("no return value specified for HasReleaseArtifact")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, id, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, id, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReleaseProvider_git_HasReleaseArtifact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasReleaseArtifact'
type MockReleaseProvider_git_HasReleaseArtifact_Call struct {
	*mock.Call
}

// HasReleaseArtifact is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - name string
func (_e *MockReleaseProvider_git_Expecter) HasReleaseArtifact(ctx interface{}, id interface{}, name interface{}) *MockReleaseProvider_git_HasReleaseArtifact_Call {
	return &MockReleaseProvider_git_HasReleaseArtifact_Call{Call: _e.mock.On("HasReleaseArtifact", ctx, id, name)}
}

func (_c *MockReleaseProvider_git_HasReleaseArtifact_Call) Run(run func(ctx context.Context, id string, name string)) *MockReleaseProvider_git_HasReleaseArtifact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockReleaseProvider_git_HasReleaseArtifact_Call) Return(_a0 bool, _a1 error) *MockReleaseProvider_git_HasReleaseArtifact_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReleaseProvider_git_HasReleaseArtifact_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *MockReleaseProvider_git_HasReleaseArtifact_Call {
	_c.Call.Return(run)
	return _c
}

// ListRecentReleases provides a mock function with given fields: ctx, limit
func (_m *MockReleaseProvider_git) ListRecentReleases(ctx context.Context, limit int) ([]*git.Release, error) {
	ret := _m.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for ListRecentReleases")
	}

	var r0 []*git.Release
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*git.Release, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*git.Release); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*git.Release)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReleaseProvider_git_ListRecentReleases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRecentReleases'
type MockReleaseProvider_git_ListRecentReleases_Call struct {
	*mock.Call
}

// ListRecentReleases is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
func (_e *MockReleaseProvider_git_Expecter) ListRecentReleases(ctx interface{}, limit interface{}) *MockReleaseProvider_git_ListRecentReleases_Call {
	return &MockReleaseProvider_git_ListRecentReleases_Call{Call: _e.mock.On("ListRecentReleases", ctx, limit)}
}

func (_c *MockReleaseProvider_git_ListRecentReleases_Call) Run(run func(ctx context.Context, limit int)) *MockReleaseProvider_git_ListRecentReleases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockReleaseProvider_git_ListRecentReleases_Call) Return(_a0 []*git.Release, _a1 error) *MockReleaseProvider_git_ListRecentReleases_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReleaseProvider_git_ListRecentReleases_Call) RunAndReturn(run func(context.Context, int) ([]*git.Release, error)) *MockReleaseProvider_git_ListRecentReleases_Call {
	_c.Call.Return(run)
	return _c
}

// TagRelease provides a mock function with given fields: ctx, prov, vers
func (_m *MockReleaseProvider_git) TagRelease(ctx context.Context, prov git.GitProvider, vers *semver.Version) (*git.Release, error) {
	ret := _m.Called(ctx, prov, vers)

	if len(ret) == 0 {
		panic("no return value specified for TagRelease")
	}

	var r0 *git.Release
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GitProvider, *semver.Version) (*git.Release, error)); ok {
		return rf(ctx, prov, vers)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GitProvider, *semver.Version) *git.Release); ok {
		r0 = rf(ctx, prov, vers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.Release)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GitProvider, *semver.Version) error); ok {
		r1 = rf(ctx, prov, vers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReleaseProvider_git_TagRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagRelease'
type MockReleaseProvider_git_TagRelease_Call struct {
	*mock.Call
}

// TagRelease is a helper method to define mock.On call
//   - ctx context.Context
//   - prov git.GitProvider
//   - vers *semver.Version
func (_e *MockReleaseProvider_git_Expecter) TagRelease(ctx interface{}, prov interface{}, vers interface{}) *MockReleaseProvider_git_TagRelease_Call {
	return &MockReleaseProvider_git_TagRelease_Call{Call: _e.mock.On("TagRelease", ctx, prov, vers)}
}

func (_c *MockReleaseProvider_git_TagRelease_Call) Run(run func(ctx context.Context, prov git.GitProvider, vers *semver.Version)) *MockReleaseProvider_git_TagRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GitProvider), args[2].(*semver.Version))
	})
	return _c
}

func (_c *MockReleaseProvider_git_TagRelease_Call) Return(_a0 *git.Release, _a1 error) *MockReleaseProvider_git_TagRelease_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReleaseProvider_git_TagRelease_Call) RunAndReturn(run func(context.Context, git.GitProvider, *semver.Version) (*git.Release, error)) *MockReleaseProvider_git_TagRelease_Call {
	_c.Call.Return(run)
	return _c
}

// TakeReleaseOutOfDraft provides a mock function with given fields: ctx, id
func (_m *MockReleaseProvider_git) TakeReleaseOutOfDraft(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for TakeReleaseOutOfDraft")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReleaseProvider_git_TakeReleaseOutOfDraft_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TakeReleaseOutOfDraft'
type MockReleaseProvider_git_TakeReleaseOutOfDraft_Call struct {
	*mock.Call
}

// TakeReleaseOutOfDraft is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockReleaseProvider_git_Expecter) TakeReleaseOutOfDraft(ctx interface{}, id interface{}) *MockReleaseProvider_git_TakeReleaseOutOfDraft_Call {
	return &MockReleaseProvider_git_TakeReleaseOutOfDraft_Call{Call: _e.mock.On("TakeReleaseOutOfDraft", ctx, id)}
}

func (_c *MockReleaseProvider_git_TakeReleaseOutOfDraft_Call) Run(run func(ctx context.Context, id string)) *MockReleaseProvider_git_TakeReleaseOutOfDraft_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockReleaseProvider_git_TakeReleaseOutOfDraft_Call) Return(_a0 error) *MockReleaseProvider_git_TakeReleaseOutOfDraft_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReleaseProvider_git_TakeReleaseOutOfDraft_Call) RunAndReturn(run func(context.Context, string) error) *MockReleaseProvider_git_TakeReleaseOutOfDraft_Call {
	_c.Call.Return(run)
	return _c
}

// UploadReleaseArtifact provides a mock function with given fields: ctx, id, name, file
func (_m *MockReleaseProvider_git) UploadReleaseArtifact(ctx context.Context, id string, name string, file afero.File) error {
	ret := _m.Called(ctx, id, name, file)

	if len(ret) == 0 {
		panic("no return value specified for UploadReleaseArtifact")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, afero.File) error); ok {
		r0 = rf(ctx, id, name, file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReleaseProvider_git_UploadReleaseArtifact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadReleaseArtifact'
type MockReleaseProvider_git_UploadReleaseArtifact_Call struct {
	*mock.Call
}

// UploadReleaseArtifact is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - name string
//   - file afero.File
func (_e *MockReleaseProvider_git_Expecter) UploadReleaseArtifact(ctx interface{}, id interface{}, name interface{}, file interface{}) *MockReleaseProvider_git_UploadReleaseArtifact_Call {
	return &MockReleaseProvider_git_UploadReleaseArtifact_Call{Call: _e.mock.On("UploadReleaseArtifact", ctx, id, name, file)}
}

func (_c *MockReleaseProvider_git_UploadReleaseArtifact_Call) Run(run func(ctx context.Context, id string, name string, file afero.File)) *MockReleaseProvider_git_UploadReleaseArtifact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(afero.File))
	})
	return _c
}

func (_c *MockReleaseProvider_git_UploadReleaseArtifact_Call) Return(_a0 error) *MockReleaseProvider_git_UploadReleaseArtifact_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReleaseProvider_git_UploadReleaseArtifact_Call) RunAndReturn(run func(context.Context, string, string, afero.File) error) *MockReleaseProvider_git_UploadReleaseArtifact_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReleaseProvider_git creates a new instance of MockReleaseProvider_git. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReleaseProvider_git(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReleaseProvider_git {
	mock := &MockReleaseProvider_git{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
