// Code generated by mockery v2.30.1. DO NOT EDIT.

package gitmocks

import (
	context "context"

	afero "github.com/spf13/afero"

	git "github.com/walteh/buildrc/internal/git"

	mock "github.com/stretchr/testify/mock"

	semver "github.com/Masterminds/semver/v3"
)

// ReleaseProvider is an autogenerated mock type for the ReleaseProvider type
type ReleaseProvider struct {
	mock.Mock
}

type ReleaseProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *ReleaseProvider) EXPECT() *ReleaseProvider_Expecter {
	return &ReleaseProvider_Expecter{mock: &_m.Mock}
}

// CreateRelease provides a mock function with given fields: ctx, g, t
func (_m *ReleaseProvider) CreateRelease(ctx context.Context, g git.GitProvider, t *semver.Version) (*git.Release, error) {
	ret := _m.Called(ctx, g, t)

	var r0 *git.Release
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, git.GitProvider, *semver.Version) (*git.Release, error)); ok {
		return rf(ctx, g, t)
	}
	if rf, ok := ret.Get(0).(func(context.Context, git.GitProvider, *semver.Version) *git.Release); ok {
		r0 = rf(ctx, g, t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.Release)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, git.GitProvider, *semver.Version) error); ok {
		r1 = rf(ctx, g, t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseProvider_CreateRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRelease'
type ReleaseProvider_CreateRelease_Call struct {
	*mock.Call
}

// CreateRelease is a helper method to define mock.On call
//   - ctx context.Context
//   - g git.GitProvider
//   - t *semver.Version
func (_e *ReleaseProvider_Expecter) CreateRelease(ctx interface{}, g interface{}, t interface{}) *ReleaseProvider_CreateRelease_Call {
	return &ReleaseProvider_CreateRelease_Call{Call: _e.mock.On("CreateRelease", ctx, g, t)}
}

func (_c *ReleaseProvider_CreateRelease_Call) Run(run func(ctx context.Context, g git.GitProvider, t *semver.Version)) *ReleaseProvider_CreateRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GitProvider), args[2].(*semver.Version))
	})
	return _c
}

func (_c *ReleaseProvider_CreateRelease_Call) Return(_a0 *git.Release, _a1 error) *ReleaseProvider_CreateRelease_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReleaseProvider_CreateRelease_Call) RunAndReturn(run func(context.Context, git.GitProvider, *semver.Version) (*git.Release, error)) *ReleaseProvider_CreateRelease_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadReleaseArtifact provides a mock function with given fields: ctx, r, name, filesystem
func (_m *ReleaseProvider) DownloadReleaseArtifact(ctx context.Context, r *git.Release, name string, filesystem afero.Fs) (afero.File, error) {
	ret := _m.Called(ctx, r, name, filesystem)

	var r0 afero.File
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *git.Release, string, afero.Fs) (afero.File, error)); ok {
		return rf(ctx, r, name, filesystem)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *git.Release, string, afero.Fs) afero.File); ok {
		r0 = rf(ctx, r, name, filesystem)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(afero.File)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *git.Release, string, afero.Fs) error); ok {
		r1 = rf(ctx, r, name, filesystem)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseProvider_DownloadReleaseArtifact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadReleaseArtifact'
type ReleaseProvider_DownloadReleaseArtifact_Call struct {
	*mock.Call
}

// DownloadReleaseArtifact is a helper method to define mock.On call
//   - ctx context.Context
//   - r *git.Release
//   - name string
//   - filesystem afero.Fs
func (_e *ReleaseProvider_Expecter) DownloadReleaseArtifact(ctx interface{}, r interface{}, name interface{}, filesystem interface{}) *ReleaseProvider_DownloadReleaseArtifact_Call {
	return &ReleaseProvider_DownloadReleaseArtifact_Call{Call: _e.mock.On("DownloadReleaseArtifact", ctx, r, name, filesystem)}
}

func (_c *ReleaseProvider_DownloadReleaseArtifact_Call) Run(run func(ctx context.Context, r *git.Release, name string, filesystem afero.Fs)) *ReleaseProvider_DownloadReleaseArtifact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*git.Release), args[2].(string), args[3].(afero.Fs))
	})
	return _c
}

func (_c *ReleaseProvider_DownloadReleaseArtifact_Call) Return(_a0 afero.File, _a1 error) *ReleaseProvider_DownloadReleaseArtifact_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReleaseProvider_DownloadReleaseArtifact_Call) RunAndReturn(run func(context.Context, *git.Release, string, afero.Fs) (afero.File, error)) *ReleaseProvider_DownloadReleaseArtifact_Call {
	_c.Call.Return(run)
	return _c
}

// GetReleaseByTag provides a mock function with given fields: ctx, tag
func (_m *ReleaseProvider) GetReleaseByTag(ctx context.Context, tag string) (*git.Release, error) {
	ret := _m.Called(ctx, tag)

	var r0 *git.Release
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*git.Release, error)); ok {
		return rf(ctx, tag)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *git.Release); ok {
		r0 = rf(ctx, tag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.Release)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseProvider_GetReleaseByTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReleaseByTag'
type ReleaseProvider_GetReleaseByTag_Call struct {
	*mock.Call
}

// GetReleaseByTag is a helper method to define mock.On call
//   - ctx context.Context
//   - tag string
func (_e *ReleaseProvider_Expecter) GetReleaseByTag(ctx interface{}, tag interface{}) *ReleaseProvider_GetReleaseByTag_Call {
	return &ReleaseProvider_GetReleaseByTag_Call{Call: _e.mock.On("GetReleaseByTag", ctx, tag)}
}

func (_c *ReleaseProvider_GetReleaseByTag_Call) Run(run func(ctx context.Context, tag string)) *ReleaseProvider_GetReleaseByTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ReleaseProvider_GetReleaseByTag_Call) Return(_a0 *git.Release, _a1 error) *ReleaseProvider_GetReleaseByTag_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReleaseProvider_GetReleaseByTag_Call) RunAndReturn(run func(context.Context, string) (*git.Release, error)) *ReleaseProvider_GetReleaseByTag_Call {
	_c.Call.Return(run)
	return _c
}

// ListRecentReleases provides a mock function with given fields: ctx, limit
func (_m *ReleaseProvider) ListRecentReleases(ctx context.Context, limit int) ([]*git.Release, error) {
	ret := _m.Called(ctx, limit)

	var r0 []*git.Release
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*git.Release, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*git.Release); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*git.Release)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseProvider_ListRecentReleases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRecentReleases'
type ReleaseProvider_ListRecentReleases_Call struct {
	*mock.Call
}

// ListRecentReleases is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
func (_e *ReleaseProvider_Expecter) ListRecentReleases(ctx interface{}, limit interface{}) *ReleaseProvider_ListRecentReleases_Call {
	return &ReleaseProvider_ListRecentReleases_Call{Call: _e.mock.On("ListRecentReleases", ctx, limit)}
}

func (_c *ReleaseProvider_ListRecentReleases_Call) Run(run func(ctx context.Context, limit int)) *ReleaseProvider_ListRecentReleases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *ReleaseProvider_ListRecentReleases_Call) Return(_a0 []*git.Release, _a1 error) *ReleaseProvider_ListRecentReleases_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReleaseProvider_ListRecentReleases_Call) RunAndReturn(run func(context.Context, int) ([]*git.Release, error)) *ReleaseProvider_ListRecentReleases_Call {
	_c.Call.Return(run)
	return _c
}

// TagRelease provides a mock function with given fields: ctx, r, vers, commit
func (_m *ReleaseProvider) TagRelease(ctx context.Context, r *git.Release, vers *semver.Version, commit string) (*git.Release, error) {
	ret := _m.Called(ctx, r, vers, commit)

	var r0 *git.Release
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *git.Release, *semver.Version, string) (*git.Release, error)); ok {
		return rf(ctx, r, vers, commit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *git.Release, *semver.Version, string) *git.Release); ok {
		r0 = rf(ctx, r, vers, commit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.Release)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *git.Release, *semver.Version, string) error); ok {
		r1 = rf(ctx, r, vers, commit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseProvider_TagRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagRelease'
type ReleaseProvider_TagRelease_Call struct {
	*mock.Call
}

// TagRelease is a helper method to define mock.On call
//   - ctx context.Context
//   - r *git.Release
//   - vers *semver.Version
//   - commit string
func (_e *ReleaseProvider_Expecter) TagRelease(ctx interface{}, r interface{}, vers interface{}, commit interface{}) *ReleaseProvider_TagRelease_Call {
	return &ReleaseProvider_TagRelease_Call{Call: _e.mock.On("TagRelease", ctx, r, vers, commit)}
}

func (_c *ReleaseProvider_TagRelease_Call) Run(run func(ctx context.Context, r *git.Release, vers *semver.Version, commit string)) *ReleaseProvider_TagRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*git.Release), args[2].(*semver.Version), args[3].(string))
	})
	return _c
}

func (_c *ReleaseProvider_TagRelease_Call) Return(_a0 *git.Release, _a1 error) *ReleaseProvider_TagRelease_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReleaseProvider_TagRelease_Call) RunAndReturn(run func(context.Context, *git.Release, *semver.Version, string) (*git.Release, error)) *ReleaseProvider_TagRelease_Call {
	_c.Call.Return(run)
	return _c
}

// UploadReleaseArtifact provides a mock function with given fields: ctx, r, name, file
func (_m *ReleaseProvider) UploadReleaseArtifact(ctx context.Context, r *git.Release, name string, file afero.File) error {
	ret := _m.Called(ctx, r, name, file)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *git.Release, string, afero.File) error); ok {
		r0 = rf(ctx, r, name, file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReleaseProvider_UploadReleaseArtifact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadReleaseArtifact'
type ReleaseProvider_UploadReleaseArtifact_Call struct {
	*mock.Call
}

// UploadReleaseArtifact is a helper method to define mock.On call
//   - ctx context.Context
//   - r *git.Release
//   - name string
//   - file afero.File
func (_e *ReleaseProvider_Expecter) UploadReleaseArtifact(ctx interface{}, r interface{}, name interface{}, file interface{}) *ReleaseProvider_UploadReleaseArtifact_Call {
	return &ReleaseProvider_UploadReleaseArtifact_Call{Call: _e.mock.On("UploadReleaseArtifact", ctx, r, name, file)}
}

func (_c *ReleaseProvider_UploadReleaseArtifact_Call) Run(run func(ctx context.Context, r *git.Release, name string, file afero.File)) *ReleaseProvider_UploadReleaseArtifact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*git.Release), args[2].(string), args[3].(afero.File))
	})
	return _c
}

func (_c *ReleaseProvider_UploadReleaseArtifact_Call) Return(_a0 error) *ReleaseProvider_UploadReleaseArtifact_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReleaseProvider_UploadReleaseArtifact_Call) RunAndReturn(run func(context.Context, *git.Release, string, afero.File) error) *ReleaseProvider_UploadReleaseArtifact_Call {
	_c.Call.Return(run)
	return _c
}

// NewReleaseProvider creates a new instance of ReleaseProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReleaseProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReleaseProvider {
	mock := &ReleaseProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
