// Code generated by mockery v2.30.1. DO NOT EDIT.

package gitmocks

import (
	context "context"

	git "github.com/nuggxyz/buildrc/internal/git"
	mock "github.com/stretchr/testify/mock"

	semver "github.com/Masterminds/semver/v3"
)

// GitProvider is an autogenerated mock type for the GitProvider type
type GitProvider struct {
	mock.Mock
}

type GitProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *GitProvider) EXPECT() *GitProvider_Expecter {
	return &GitProvider_Expecter{mock: &_m.Mock}
}

// GetContentHashFromRef provides a mock function with given fields: ctx, ref
func (_m *GitProvider) GetContentHashFromRef(ctx context.Context, ref string) (string, error) {
	ret := _m.Called(ctx, ref)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, ref)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, ref)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GitProvider_GetContentHashFromRef_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContentHashFromRef'
type GitProvider_GetContentHashFromRef_Call struct {
	*mock.Call
}

// GetContentHashFromRef is a helper method to define mock.On call
//   - ctx context.Context
//   - ref string
func (_e *GitProvider_Expecter) GetContentHashFromRef(ctx interface{}, ref interface{}) *GitProvider_GetContentHashFromRef_Call {
	return &GitProvider_GetContentHashFromRef_Call{Call: _e.mock.On("GetContentHashFromRef", ctx, ref)}
}

func (_c *GitProvider_GetContentHashFromRef_Call) Run(run func(ctx context.Context, ref string)) *GitProvider_GetContentHashFromRef_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GitProvider_GetContentHashFromRef_Call) Return(_a0 string, _a1 error) *GitProvider_GetContentHashFromRef_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GitProvider_GetContentHashFromRef_Call) RunAndReturn(run func(context.Context, string) (string, error)) *GitProvider_GetContentHashFromRef_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentBranchFromRef provides a mock function with given fields: ctx, ref
func (_m *GitProvider) GetCurrentBranchFromRef(ctx context.Context, ref string) (string, error) {
	ret := _m.Called(ctx, ref)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, ref)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, ref)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GitProvider_GetCurrentBranchFromRef_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentBranchFromRef'
type GitProvider_GetCurrentBranchFromRef_Call struct {
	*mock.Call
}

// GetCurrentBranchFromRef is a helper method to define mock.On call
//   - ctx context.Context
//   - ref string
func (_e *GitProvider_Expecter) GetCurrentBranchFromRef(ctx interface{}, ref interface{}) *GitProvider_GetCurrentBranchFromRef_Call {
	return &GitProvider_GetCurrentBranchFromRef_Call{Call: _e.mock.On("GetCurrentBranchFromRef", ctx, ref)}
}

func (_c *GitProvider_GetCurrentBranchFromRef_Call) Run(run func(ctx context.Context, ref string)) *GitProvider_GetCurrentBranchFromRef_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GitProvider_GetCurrentBranchFromRef_Call) Return(_a0 string, _a1 error) *GitProvider_GetCurrentBranchFromRef_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GitProvider_GetCurrentBranchFromRef_Call) RunAndReturn(run func(context.Context, string) (string, error)) *GitProvider_GetCurrentBranchFromRef_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentCommitFromRef provides a mock function with given fields: ctx, ref
func (_m *GitProvider) GetCurrentCommitFromRef(ctx context.Context, ref string) (string, error) {
	ret := _m.Called(ctx, ref)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, ref)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, ref)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GitProvider_GetCurrentCommitFromRef_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentCommitFromRef'
type GitProvider_GetCurrentCommitFromRef_Call struct {
	*mock.Call
}

// GetCurrentCommitFromRef is a helper method to define mock.On call
//   - ctx context.Context
//   - ref string
func (_e *GitProvider_Expecter) GetCurrentCommitFromRef(ctx interface{}, ref interface{}) *GitProvider_GetCurrentCommitFromRef_Call {
	return &GitProvider_GetCurrentCommitFromRef_Call{Call: _e.mock.On("GetCurrentCommitFromRef", ctx, ref)}
}

func (_c *GitProvider_GetCurrentCommitFromRef_Call) Run(run func(ctx context.Context, ref string)) *GitProvider_GetCurrentCommitFromRef_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GitProvider_GetCurrentCommitFromRef_Call) Return(_a0 string, _a1 error) *GitProvider_GetCurrentCommitFromRef_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GitProvider_GetCurrentCommitFromRef_Call) RunAndReturn(run func(context.Context, string) (string, error)) *GitProvider_GetCurrentCommitFromRef_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestSemverTagFromRef provides a mock function with given fields: ctx, ref
func (_m *GitProvider) GetLatestSemverTagFromRef(ctx context.Context, ref string) (*semver.Version, error) {
	ret := _m.Called(ctx, ref)

	var r0 *semver.Version
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*semver.Version, error)); ok {
		return rf(ctx, ref)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *semver.Version); ok {
		r0 = rf(ctx, ref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*semver.Version)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GitProvider_GetLatestSemverTagFromRef_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestSemverTagFromRef'
type GitProvider_GetLatestSemverTagFromRef_Call struct {
	*mock.Call
}

// GetLatestSemverTagFromRef is a helper method to define mock.On call
//   - ctx context.Context
//   - ref string
func (_e *GitProvider_Expecter) GetLatestSemverTagFromRef(ctx interface{}, ref interface{}) *GitProvider_GetLatestSemverTagFromRef_Call {
	return &GitProvider_GetLatestSemverTagFromRef_Call{Call: _e.mock.On("GetLatestSemverTagFromRef", ctx, ref)}
}

func (_c *GitProvider_GetLatestSemverTagFromRef_Call) Run(run func(ctx context.Context, ref string)) *GitProvider_GetLatestSemverTagFromRef_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GitProvider_GetLatestSemverTagFromRef_Call) Return(_a0 *semver.Version, _a1 error) *GitProvider_GetLatestSemverTagFromRef_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GitProvider_GetLatestSemverTagFromRef_Call) RunAndReturn(run func(context.Context, string) (*semver.Version, error)) *GitProvider_GetLatestSemverTagFromRef_Call {
	_c.Call.Return(run)
	return _c
}

// GetLocalRepositoryMetadata provides a mock function with given fields: ctx
func (_m *GitProvider) GetLocalRepositoryMetadata(ctx context.Context) (*git.LocalRepositoryMetadata, error) {
	ret := _m.Called(ctx)

	var r0 *git.LocalRepositoryMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*git.LocalRepositoryMetadata, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *git.LocalRepositoryMetadata); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.LocalRepositoryMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GitProvider_GetLocalRepositoryMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocalRepositoryMetadata'
type GitProvider_GetLocalRepositoryMetadata_Call struct {
	*mock.Call
}

// GetLocalRepositoryMetadata is a helper method to define mock.On call
//   - ctx context.Context
func (_e *GitProvider_Expecter) GetLocalRepositoryMetadata(ctx interface{}) *GitProvider_GetLocalRepositoryMetadata_Call {
	return &GitProvider_GetLocalRepositoryMetadata_Call{Call: _e.mock.On("GetLocalRepositoryMetadata", ctx)}
}

func (_c *GitProvider_GetLocalRepositoryMetadata_Call) Run(run func(ctx context.Context)) *GitProvider_GetLocalRepositoryMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *GitProvider_GetLocalRepositoryMetadata_Call) Return(_a0 *git.LocalRepositoryMetadata, _a1 error) *GitProvider_GetLocalRepositoryMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GitProvider_GetLocalRepositoryMetadata_Call) RunAndReturn(run func(context.Context) (*git.LocalRepositoryMetadata, error)) *GitProvider_GetLocalRepositoryMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// NewGitProvider creates a new instance of GitProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGitProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *GitProvider {
	mock := &GitProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
